// Query TypeMap
import "@sanity/client";

/**
 * ---------------------------------------------------------------------------------
 * This file has been generated by Sanity TypeGen.
 * Command: `sanity typegen generate`
 *
 * Any modifications made directly to this file will be overwritten the next time
 * the TypeScript definitions are generated. Please make changes to the Sanity
 * schema definitions and/or GROQ queries if you need to update these types.
 *
 * For more information on how to use Sanity TypeGen, visit the official documentation:
 * https://www.sanity.io/docs/sanity-typegen
 * ---------------------------------------------------------------------------------
 */

// Source: schema.json
export type Settings = {
	_id: string;
	_type: "settings";
	_createdAt: string;
	_updatedAt: string;
	_rev: string;
	works?: Array<{
		_ref: string;
		_type: "reference";
		_weak?: boolean;
		_key: string;
		[internalGroqTypeReferenceTo]?: "work";
	}>;
	contacts?: Array<{
		_ref: string;
		_type: "reference";
		_weak?: boolean;
		_key: string;
		[internalGroqTypeReferenceTo]?: "contact";
	}>;
	banner?: string;
	about?: string;
	generalConditionsOfSale?: string;
	legalNotices?: string;
	privacyPolicy?: string;
};

export type Contact = {
	_id: string;
	_type: "contact";
	_createdAt: string;
	_updatedAt: string;
	_rev: string;
	title?: string;
	slug?: Slug;
	url?: string;
	text?: string;
	blank?: boolean;
};

export type Work = {
	_id: string;
	_type: "work";
	_createdAt: string;
	_updatedAt: string;
	_rev: string;
	title?: string;
	slug?: Slug;
	mainImage?: {
		asset?: {
			_ref: string;
			_type: "reference";
			_weak?: boolean;
			[internalGroqTypeReferenceTo]?: "sanity.imageAsset";
		};
		media?: unknown;
		hotspot?: SanityImageHotspot;
		crop?: SanityImageCrop;
		alt?: string;
		_type: "image";
	};
	tags?: Array<{
		_ref: string;
		_type: "reference";
		_weak?: boolean;
		_key: string;
		[internalGroqTypeReferenceTo]?: "tag";
	}>;
	text?: string;
	gallery?: Array<{
		asset?: {
			_ref: string;
			_type: "reference";
			_weak?: boolean;
			[internalGroqTypeReferenceTo]?: "sanity.imageAsset";
		};
		media?: unknown;
		hotspot?: SanityImageHotspot;
		crop?: SanityImageCrop;
		alt?: string;
		_type: "image";
		_key: string;
	}>;
};

export type Tag = {
	_id: string;
	_type: "tag";
	_createdAt: string;
	_updatedAt: string;
	_rev: string;
	name?: string;
	slug?: Slug;
};

export type Markdown = string;

export type SanityImagePaletteSwatch = {
	_type: "sanity.imagePaletteSwatch";
	background?: string;
	foreground?: string;
	population?: number;
	title?: string;
};

export type SanityImagePalette = {
	_type: "sanity.imagePalette";
	darkMuted?: SanityImagePaletteSwatch;
	lightVibrant?: SanityImagePaletteSwatch;
	darkVibrant?: SanityImagePaletteSwatch;
	vibrant?: SanityImagePaletteSwatch;
	dominant?: SanityImagePaletteSwatch;
	lightMuted?: SanityImagePaletteSwatch;
	muted?: SanityImagePaletteSwatch;
};

export type SanityImageDimensions = {
	_type: "sanity.imageDimensions";
	height?: number;
	width?: number;
	aspectRatio?: number;
};

export type SanityImageHotspot = {
	_type: "sanity.imageHotspot";
	x?: number;
	y?: number;
	height?: number;
	width?: number;
};

export type SanityImageCrop = {
	_type: "sanity.imageCrop";
	top?: number;
	bottom?: number;
	left?: number;
	right?: number;
};

export type SanityFileAsset = {
	_id: string;
	_type: "sanity.fileAsset";
	_createdAt: string;
	_updatedAt: string;
	_rev: string;
	originalFilename?: string;
	label?: string;
	title?: string;
	description?: string;
	altText?: string;
	sha1hash?: string;
	extension?: string;
	mimeType?: string;
	size?: number;
	assetId?: string;
	uploadId?: string;
	path?: string;
	url?: string;
	source?: SanityAssetSourceData;
};

export type SanityImageAsset = {
	_id: string;
	_type: "sanity.imageAsset";
	_createdAt: string;
	_updatedAt: string;
	_rev: string;
	originalFilename?: string;
	label?: string;
	title?: string;
	description?: string;
	altText?: string;
	sha1hash?: string;
	extension?: string;
	mimeType?: string;
	size?: number;
	assetId?: string;
	uploadId?: string;
	path?: string;
	url?: string;
	metadata?: SanityImageMetadata;
	source?: SanityAssetSourceData;
};

export type SanityImageMetadata = {
	_type: "sanity.imageMetadata";
	location?: Geopoint;
	dimensions?: SanityImageDimensions;
	palette?: SanityImagePalette;
	lqip?: string;
	blurHash?: string;
	hasAlpha?: boolean;
	isOpaque?: boolean;
};

export type Geopoint = {
	_type: "geopoint";
	lat?: number;
	lng?: number;
	alt?: number;
};

export type Slug = {
	_type: "slug";
	current?: string;
	source?: string;
};

export type SanityAssetSourceData = {
	_type: "sanity.assetSourceData";
	name?: string;
	id?: string;
	url?: string;
};

export type AllSanitySchemaTypes =
	| Settings
	| Contact
	| Work
	| Tag
	| Markdown
	| SanityImagePaletteSwatch
	| SanityImagePalette
	| SanityImageDimensions
	| SanityImageHotspot
	| SanityImageCrop
	| SanityFileAsset
	| SanityImageAsset
	| SanityImageMetadata
	| Geopoint
	| Slug
	| SanityAssetSourceData;
export declare const internalGroqTypeReferenceTo: unique symbol;
// Source: sanityBackend/lib/queries.ts
// Variable: CONTACTS_QUERY
// Query: *[_type == "settings"][0]{    contacts[0...10]{      "_id": _key,      ...(@-> {        "slug": slug.current,        text,        title,        url,        blank      })    }  }
export type CONTACTS_QUERYResult = {
	contacts: Array<{
		_id: string;
		slug: string | null;
		text: string | null;
		title: string | null;
		url: string | null;
		blank: boolean | null;
	}> | null;
} | null;
// Variable: HOME_WORKS_QUERY
// Query: *[_type == "settings"][0]{    works[0...3]{      "_id": _key,      ...(@-> {        title,        "slug": slug.current,        "mainImage": mainImage {          alt,          "url": asset->url,          "_id": _key,          "width": asset->metadata.dimensions.width,          "height": asset->metadata.dimensions.height,          "blurHash": asset->metadata.blurHash,          "lqip": asset->metadata.lqip,        },      })    }  }
export type HOME_WORKS_QUERYResult = {
	works: Array<{
		_id: string;
		title: string | null;
		slug: string | null;
		mainImage: {
			alt: string | null;
			url: string | null;
			_id: null;
			width: number | null;
			height: number | null;
			blurHash: string | null;
			lqip: string | null;
		} | null;
	}> | null;
} | null;
// Variable: GALLERY_WORKS_QUERY
// Query: *[_type == "settings"][0]{    works[0...10]{      "_id": _key,      ...(@-> {        "slug": slug.current,        title,        text,        "gallery": gallery[]{          alt,          "url": asset->url,          "_id": _key,          "width": asset->metadata.dimensions.width,          "height": asset->metadata.dimensions.height,          "blurHash": asset->metadata.blurHash,          "lqip": asset->metadata.lqip,        }      })    }  }
export type GALLERY_WORKS_QUERYResult = {
	works: Array<{
		_id: string;
		slug: string | null;
		title: string | null;
		text: string | null;
		gallery: Array<{
			alt: string | null;
			url: string | null;
			_id: string;
			width: number | null;
			height: number | null;
			blurHash: string | null;
			lqip: string | null;
		}> | null;
	}> | null;
} | null;
// Variable: WORK_QUERY
// Query: *[_type == "work" && slug.current == $slug][0]{    _id,    "slug": slug.current,    title,    text,    "gallery": gallery[]{      alt,      "url": asset->url,      "_id": _key,      "width": asset->metadata.dimensions.width,      "height": asset->metadata.dimensions.height,      "blurHash": asset->metadata.blurHash,      "lqip": asset->metadata.lqip,    }  }
export type WORK_QUERYResult = {
	_id: string;
	slug: string | null;
	title: string | null;
	text: string | null;
	gallery: Array<{
		alt: string | null;
		url: string | null;
		_id: string;
		width: number | null;
		height: number | null;
		blurHash: string | null;
		lqip: string | null;
	}> | null;
} | null;

declare module "@sanity/client" {
	interface SanityQueries {
		'\n  *[_type == "settings"][0]{\n    contacts[0...10]{\n      "_id": _key,\n      ...(@-> {\n        "slug": slug.current,\n        text,\n        title,\n        url,\n        blank\n      })\n    }\n  }\n': CONTACTS_QUERYResult;
		'\n  *[_type == "settings"][0]{\n    works[0...3]{\n      "_id": _key,\n      ...(@-> {\n        title,\n        "slug": slug.current,\n        "mainImage": mainImage {\n          alt,\n          "url": asset->url,\n          "_id": _key,\n          "width": asset->metadata.dimensions.width,\n          "height": asset->metadata.dimensions.height,\n          "blurHash": asset->metadata.blurHash,\n          "lqip": asset->metadata.lqip,\n        },\n      })\n    }\n  }\n': HOME_WORKS_QUERYResult;
		'\n  *[_type == "settings"][0]{\n    works[0...10]{\n      "_id": _key,\n      ...(@-> {\n        "slug": slug.current,\n        title,\n        text,\n        "gallery": gallery[]{\n          alt,\n          "url": asset->url,\n          "_id": _key,\n          "width": asset->metadata.dimensions.width,\n          "height": asset->metadata.dimensions.height,\n          "blurHash": asset->metadata.blurHash,\n          "lqip": asset->metadata.lqip,\n        }\n      })\n    }\n  }\n': GALLERY_WORKS_QUERYResult;
		'\n  *[_type == "work" && slug.current == $slug][0]{\n    _id,\n    "slug": slug.current,\n    title,\n    text,\n    "gallery": gallery[]{\n      alt,\n      "url": asset->url,\n      "_id": _key,\n      "width": asset->metadata.dimensions.width,\n      "height": asset->metadata.dimensions.height,\n      "blurHash": asset->metadata.blurHash,\n      "lqip": asset->metadata.lqip,\n    }\n  }  \n': WORK_QUERYResult;
	}
}
